/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-17 08:50:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class MainPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String loginId = (String)session.getAttribute("userId");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<!-- <html style=\"margin: 0px\"> -->\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t\t<title>메인페이지</title>\r\n");
      out.write("\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"resources/css/style.css\">\r\n");
      out.write("\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("\t\t<style>\r\n");
      out.write("\t\t\t/* 메뉴가 접히고 펼쳐지는 부분에 대한 css 설정 */\r\n");
      out.write("\t\t\t.accordion {\r\n");
      out.write("\t\t\t\tbackground-color: black;\r\n");
      out.write("\t\t\t\tcolor: white;\r\n");
      out.write("\t\t\t\tcursor: pointer;\t/* 메뉴위로 마우스를 가져다 댈 경우 커서의 모양을 손가락 모양으로 바꿔줌 */\r\n");
      out.write("\t\t\t\tpadding: 5px 0px 5px 10px;\r\n");
      out.write("\t\t\t\twidth: 100%;\r\n");
      out.write("\t\t\t\tborder: none;\t\t/* 버튼의 경계선을 없애줌 */\r\n");
      out.write("\t\t\t\ttext-align: left;\t/* 왼쪽 정렬 */\r\n");
      out.write("\t\t\t\toutline: none;\t\t/* 아웃 라인을 없에줌 */\r\n");
      out.write("\t\t\t\tfont-size: 20px;\r\n");
      out.write("\t\t\t\ttransition: 0.4s;\t/* 트렌지션을 완수하는데  걸리는 시간으로, 여기서는 펼쳐지는 시간을 의미함 */\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t.panel {\r\n");
      out.write("\t\t\t\tcolor: white;\r\n");
      out.write("\t\t\t\tfont-size: 15px;\r\n");
      out.write("\t\t\t\ttext-align: right;\r\n");
      out.write("\t\t\t\tdisplay: none;\t\t/* 해당 클래스의 요소들을 랜더링 하지 않도록 해줌 */\r\n");
      out.write("\t\t\t\tbackground-color: black;\r\n");
      out.write("\t\t\t\toverflow: hidden;\t/* 넘쳐지는 부분이 잘려서 보이지 않도록 설정을 해줌 */\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t#loginSession{\r\n");
      out.write("\t\t\t\tcolor: white;\r\n");
      out.write("\t\t\t\tbackground: #666666;\r\n");
      out.write("\t\t\t\tfont-size: 20px;\r\n");
      out.write("\t\t\t\tfont-family: bold;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t</style>\r\n");
      out.write("\t\t<script type=\"text/javascript\" src=\"resources/js/jquery-3.6.0.js\"></script>\r\n");
      out.write("\t\t<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\r\n");
      out.write("\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\tfunction notLogin() {\t/* 로그인이 되지 않았을 때 로그인이 필요한 페이지를 눌렀을 경우 로그인이 안됬다고 알려줌 */\r\n");
      out.write("\t\t\t\talert(\"로그인 되지 않았습니다. 로그인을 해주세요!\")\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t$(function() {\r\n");
      out.write("\t\t\t\t$('#btn1').click(function() {\t// btn1이라는 id를 가진 버튼을 누를 경우 동작\r\n");
      out.write("\t\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\t\turl: \"userAgeInformation\",\t// DB에 있는 데이터를 가져오기 위해서 가상의 주소를 Controller로 Mapping\r\n");
      out.write("\t\t\t\t\t\tsuccess: function(json) {\t// DB에서 데이터를 가져왔을경우 가져온 json 형식의 데이터를 'json'이라는 변수에 넣음\r\n");
      out.write("\t\t\t\t\t\t\t// 연령대 별 인원수를 알기위해서 count로 쓸 변수를 선언\r\n");
      out.write("\t\t\t\t\t\t\tcAge0 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tcAge10 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tcAge20 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tcAge30 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tcAge40 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tcAge50 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tcAge60 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tfor(var i = 0; i < json.length; i++){\t// 가져온 json의 크기만큼을 반복\r\n");
      out.write("\t\t\t\t\t\t\t\tbirth = json[i].ubirth\t\t// 형식이  월/일/년 인 생년월일 데이터를 birth에 저장\r\n");
      out.write("\t\t\t\t\t\t\t\tbirthSplit = birth.split(\"/\")[2] // birth에  저장된 데이터를 나이를 계산하기 위해서 split 함수를 이용해서 분리후 맨마지막 2째 인덱스를 가져옴\r\n");
      out.write("\t\t\t\t\t\t\t\tif(birthSplit > 2011){\t// 21년이기때문에 10살을 기준으로 나누기위해서는 2011, 2001, ... 10씩을 구분을 해줌\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconsole.log(\"0~9세\")\t// 제대로 되었는지 확인을 하기위해서 브라우저의 콘솔창에 출력을 해줌\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcAge0 = cAge0 + 1\t// birthSplit 값이 2021~2012년도 사이의 값일 경우 1씩 증가 \r\n");
      out.write("\t\t\t\t\t\t\t\t} else if(birthSplit > 2001){\t// birthSplit 값이 2011~202 사이의 값일 경우 1씩 증가하는 구문\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconsole.log(\"10~19세\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcAge10 = cAge10 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t} else if(birthSplit > 1991){\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconsole.log(\"20~29세\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcAge20 = cAge20 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t} else if(birthSplit > 1981){\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconsole.log(\"30~39세\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcAge30 = cAge30 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t} else if(birthSplit > 1971){\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconsole.log(\"40~49세\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcAge40 = cAge40 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t} else if(birthSplit > 1961){\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconsole.log(\"50~59세\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcAge50 = cAge50 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconsole.log(\"60세 이상\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcAge60 = cAge60 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t// 가상화 API와 차트 패키지를 로드\r\n");
      out.write("\t\t\t\t\t\t\tgoogle.charts.load(\"current\", {packages:[\"corechart\"]});\r\n");
      out.write("\t\t\t\t\t\t\t// 구글 가상화 API를 로드하기 위한 콜백 설정\r\n");
      out.write("\t\t\t\t\t\t\tgoogle.charts.setOnLoadCallback(drawChart);\r\n");
      out.write("\t\t\t\t\t\t\t// 위와 마찬가지로, API와 테이블 패키지를 로드하고, 콜백을 설정\r\n");
      out.write("\t\t\t\t\t\t\tgoogle.charts.load('current', {'packages':['table']});\r\n");
      out.write("\t\t\t\t\t\t\tgoogle.charts.setOnLoadCallback(drawTable);\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t// 데이터 테이블을 만들고 채우는 콜백, 파이 차트에 데이터를 넣고 차트를 그리는 함수\r\n");
      out.write("\t\t\t\t\t\t\tfunction drawChart() {\r\n");
      out.write("\t\t\t\t\t\t\t\t// 데이터 테이블로 위에서 10살을 기준으로 횟수를 증가시켜서 저장해 놓은 데이터들을 넣어줌\r\n");
      out.write("\t\t\t\t\t\t\t\tvar data = google.visualization.arrayToDataTable([\r\n");
      out.write("\t\t\t\t\t\t\t\t\t['UserAge', 'Population'],\r\n");
      out.write("\t\t\t\t\t\t\t\t\t['10세 이하', cAge0],\r\n");
      out.write("\t\t\t\t\t\t\t\t\t['10대', cAge10],\r\n");
      out.write("\t\t\t\t\t\t\t\t\t['20대', cAge20],\r\n");
      out.write("\t\t\t\t\t\t\t\t\t['30대', cAge30],\r\n");
      out.write("\t\t\t\t\t\t\t\t\t['40대', cAge40],\r\n");
      out.write("\t\t\t\t\t\t\t\t\t['50대', cAge50],\r\n");
      out.write("\t\t\t\t\t\t\t\t\t['60세 이상', cAge60]\r\n");
      out.write("\t\t\t\t\t\t\t\t]);\r\n");
      out.write("\t\t\t\t\t\t\t\t// 차트의 옵션에 대한 설정\r\n");
      out.write("\t\t\t\t\t\t\t\tvar options = {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// 너비와 높이 설정(기본 단위 px)\r\n");
      out.write("\t\t\t\t\t\t\t\t\twidth: 650,\r\n");
      out.write("\t\t\t\t\t\t\t        height: 500,\r\n");
      out.write("\t\t\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t\t\t\t\tpieSliceText: 'label',\t// 해당 지역에 마우스를 올리면 나오는 정보형식\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttitle: '가입자의 연령대',\t// 어떠한 것인지를 나타내주는 제목 설정\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfontSize: 20,\t\t// 안의 font-size 설정\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpieStartAngle: 0,\t// 파이차트의 데이터가 시작하는 각도를 설정\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// 차트의 크기를 설정\r\n");
      out.write("\t\t\t\t\t\t\t\t\tchartArea:{left: 50, top: 50, width: 620, height: 620}\r\n");
      out.write("\t\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t// 옵션을 전달해서 차트를 인스턴스화해서 그림을 그려줌\r\n");
      out.write("\t\t\t\t\t\t\t\t// document.getElementById('chartResult') 그릴 위치를 지정해줌\r\n");
      out.write("\t\t\t\t\t\t\t\tvar chart = new google.visualization.PieChart(document.getElementById('chartResult'));\r\n");
      out.write("\t\t\t\t\t\t\t\tchart.draw(data, options);\r\n");
      out.write("\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t// 데이터 테이블을 만들고 채우는 콜백, 테이블에 데이터를 넣고 차트를 그리는 함수\r\n");
      out.write("\t\t\t\t\t\t\tfunction drawTable() {\r\n");
      out.write("\t\t\t\t\t\t\t\t// 데이터 테이블로 위에서 10살을 기준으로 횟수를 증가시켜서 저장해 놓은 데이터들을 넣어줌\r\n");
      out.write("\t\t\t\t\t\t\t\tvar data2 = new google.visualization.DataTable();\r\n");
      out.write("\t\t\t\t\t\t\t\t// 데이터를 이용하기위해서 컬럼들을 추가해줌(데이터 형식, 컬럼명)의 형식으로 만들어 줌\r\n");
      out.write("\t\t\t\t\t\t\t\tdata2.addColumn('number', '번호');\r\n");
      out.write("\t\t\t\t\t\t\t\tdata2.addColumn('string', '연령대');\r\n");
      out.write("\t\t\t\t\t\t        data2.addColumn('number', '인원수');\r\n");
      out.write("\t\t\t\t\t\t        // 컬럼을 만들고 각 컬럼에 데이터를 넣기 위해서 레코드를 하나씩 채워줌\r\n");
      out.write("\t\t\t\t\t\t        // v는 값이고, f는 출력 형식을 나타냄\r\n");
      out.write("\t\t\t\t\t\t        data2.addRows([\r\n");
      out.write("\t\t\t\t\t\t        \t[1, '10세 이하',  {v: cAge0, f: cAge0 +' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [2, '10대',  {v: cAge10, f: cAge10 + ' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [3, '20대',  {v: cAge20, f: cAge20 + ' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [4, '30대',  {v: cAge30, f: cAge30 + ' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [5, '40대',  {v: cAge40, f: cAge40 + ' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [6, '50대',  {v: cAge50, f: cAge50 + ' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [7, '60세 이상',  {v: cAge60, f: cAge60 + ' 명'}]\r\n");
      out.write("\t\t\t\t\t\t\t\t]);\r\n");
      out.write("\t\t\t\t\t\t        // 테이블의 옵션을 설정\r\n");
      out.write("\t\t\t\t\t\t        var option = {\r\n");
      out.write("\t\t\t\t\t\t        \tallowHtml: true,\t// Html의 Style을 사용할수 있도록 설정\r\n");
      out.write("\t\t\t\t\t\t        \twidth: '100%',\t// 너비설정\r\n");
      out.write("\t\t\t\t\t\t        \theight: 400\t\t// 높이 설정(기본단위는 px)\r\n");
      out.write("\t\t\t\t\t\t        }\r\n");
      out.write("\t\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t\t     \t// 옵션을 전달해서 차트를 인스턴스화해서 그림을 그려줌\r\n");
      out.write("\t\t\t\t\t\t\t\t// document.getElementById('tableResult') 그릴 위치를 지정해줌\r\n");
      out.write("\t\t\t\t\t\t        var table = new google.visualization.Table(document.getElementById('tableResult'));\r\n");
      out.write("\t\t\t\t\t\t        table.draw(data2, option);\r\n");
      out.write("\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t// DB에 연결이 실패했을경우 실패헀다는 것을 알려주기 위해서 alert를 띄워줌\r\n");
      out.write("\t\t\t\t\t\terror: function() {\r\n");
      out.write("\t\t\t\t\t\t\t\talert(\"userAgeInfo 연결 실패\")\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$('#btn2').click(function() {\t// btn2의 아이디를 가진 버튼을 눌렀을 경우 작동\r\n");
      out.write("\t\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\t\turl: \"userAgeInformation\",\t// 위에 btn1의 Json 데이터를 그대로 이용하기 때문에 같은 가상주소를 사용\r\n");
      out.write("\t\t\t\t\t\tsuccess: function(json) {\t// 데이터를 가져와서 json에 저장\r\n");
      out.write("\t\t\t\t\t\t\t// 각 연령대 별의 남녀 를 분리했기 때문에 각 연령대별로 남녀 카운트를 해줄 변수를 선언\r\n");
      out.write("\t\t\t\t\t\t\tmAge0 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tfAge0 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tmAge10 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tfAge10 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tmAge20 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tfAge20 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tmAge30 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tfAge30 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tmAge40 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tfAge40 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tmAge50 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tfAge50 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tmAge60 = 0;\r\n");
      out.write("\t\t\t\t\t\t\tfAge60 = 0;\r\n");
      out.write("\t\t\t\t\t\t\t// 최종인원수를 확인해보기 위해서 선언을 해줌\r\n");
      out.write("\t\t\t\t\t\t\tmAgeAll = 0;\r\n");
      out.write("\t\t\t\t\t\t\tfAgeAll = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\tfor(var i = 0; i < json.length; i++){\r\n");
      out.write("\t\t\t\t\t\t\t\tbirth = json[i].ubirth\t\t// 형식이  월/일/년 인 생년월일 데이터를 birth에 저장\r\n");
      out.write("\t\t\t\t\t\t\t\tbirthSplit = birth.split(\"/\")[2] // birth에  저장된 데이터를 나이를 계산하기 위해서 split 함수를 이용해서 분리후 맨마지막 2째 인덱스를 가져옴\r\n");
      out.write("\t\t\t\t\t\t\t\tgender = json[i].ugender\t// 성별 데이터를 가져와서 남,녀를 구분해줌\r\n");
      out.write("\t\t\t\t\t\t\t\tif(gender == \"Male\" || gender == \"male\"){\t// 남자일 경우 안의 구문을 수행\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// 위에 설정한 연령대별로 나눈 것과 같은 방식으로 남,녀의 숫자를 저장\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif(birthSplit > 2011){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"0~9세 남자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmAge0 = mAge0 +1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else if(birthSplit > 2001) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"10~19세 남자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmAge10 = mAge10 +1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else if(birthSplit > 1991) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"20~29세 남자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmAge20 = mAge20 +1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else if(birthSplit > 1981) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"30~39세 남자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmAge30 = mAge30 +1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else if(birthSplit > 1971){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"40~49세 남자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmAge40 = mAge40 +1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else if(birthSplit > 1961){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"50~59세 남자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmAge50 = mAge50 +1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"60세 이상 남자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmAge60 = mAge60 +1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}else{\t// 여자일 경우 아래 구문을 실행\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif(birthSplit > 2011){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"0~9세 여자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfAge0 = fAge0 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else if(birthSplit > 2001) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"10~19세 여자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfAge10 = fAge10 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else if(birthSplit > 1991) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"20~29세 여자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfAge20 = fAge20 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else if(birthSplit > 1981) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"30~39세 여자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfAge30 = fAge30 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else if(birthSplit > 1971){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"40~49세 여자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfAge40 = fAge40 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else if(birthSplit > 1961){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"50~59세 여자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfAge50 = fAge50 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconsole.log(\"60세 이상 여자\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfAge60 = fAge60 + 1\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t// 가상화 API와 차트 패키지를 로드, 콜백 설정\r\n");
      out.write("\t\t\t\t\t\t    google.charts.load(\"current\", {packages:[\"corechart\"]});\r\n");
      out.write("\t\t\t\t\t\t    google.charts.setOnLoadCallback(drawChart);\r\n");
      out.write("\t\t\t\t\t\t    \r\n");
      out.write("\t\t\t\t\t\t \t// 가상화 API와 테이블 패키지를 로드, 콜백 설정\r\n");
      out.write("\t\t\t\t\t\t    google.charts.load('current', {'packages':['table']});\r\n");
      out.write("\t\t\t\t\t\t\tgoogle.charts.setOnLoadCallback(drawTable);\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t// 바 차트를 그려주는 함수\r\n");
      out.write("\t\t\t\t\t\t    function drawChart() {\r\n");
      out.write("\t\t\t\t\t\t\t\t// 위에서 얻은 데이터를  넣어줌\r\n");
      out.write("\t\t\t\t\t\t    \tvar data = google.visualization.arrayToDataTable([\r\n");
      out.write("\t\t\t\t\t\t            ['Age', 'Male', 'Female', { role: 'annotation' }],\r\n");
      out.write("\t\t\t\t\t\t            ['10세 이하', mAge0, fAge0, ''],\r\n");
      out.write("\t\t\t\t\t\t            ['10대', mAge10, fAge10, ''],\r\n");
      out.write("\t\t\t\t\t\t            ['20대', mAge20, fAge20, ''],\r\n");
      out.write("\t\t\t\t\t\t            ['30대', mAge30, fAge30, ''],\r\n");
      out.write("\t\t\t\t\t\t            ['40대', mAge40, fAge40, ''],\r\n");
      out.write("\t\t\t\t\t\t            ['50대', mAge50, fAge50, ''],\r\n");
      out.write("\t\t\t\t\t\t            ['60세 이상', mAge60, fAge60, '']\r\n");
      out.write("\t\t\t\t\t\t        ]);\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t// 옵션을 설정\r\n");
      out.write("\t\t\t\t\t\t        var options = {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// 너비와 높이 설정\r\n");
      out.write("\t\t\t\t\t\t        \twidth: 650,\r\n");
      out.write("\t\t\t\t\t\t            height: 500,\r\n");
      out.write("\t\t\t\t\t\t            // 범례를 설정, position은 차트위에 설정, maxLines는 범례에 최대 줄수설정\r\n");
      out.write("\t\t\t\t\t\t            legend: { position: 'top', maxLines: 3 },\r\n");
      out.write("\t\t\t\t\t\t            // 막대 그룹의 너비\r\n");
      out.write("\t\t\t\t\t\t            bar: { groupWidth: '75%' },\r\n");
      out.write("\t\t\t\t\t\t            fontSize: 20,\r\n");
      out.write("\t\t\t\t\t\t            isStacked: true\t// 모든 데이터들을 쌓아줌\r\n");
      out.write("\t\t\t\t\t\t        };\r\n");
      out.write("\t\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t\t     \t// 옵션을 전달해서 차트를 인스턴스화해서 그림을 그려줌\r\n");
      out.write("\t\t\t\t\t\t\t\t// document.getElementById('chartResult') 그릴 위치를 지정해줌\r\n");
      out.write("\t\t\t\t\t\t      \tvar chart = new google.visualization.BarChart(document.getElementById(\"chartResult\"));\r\n");
      out.write("\t\t\t\t\t\t      \tchart.draw(data, options);\r\n");
      out.write("\t\t\t\t\t\t  \t};\r\n");
      out.write("\t\t\t\t\t\t  \t\r\n");
      out.write("\t\t\t\t\t\t  \t// 위의 테이블 과 똑같지만 여기서는 남녀 구분을 했기 때문에 컬럼하나를 더 추가해줌\r\n");
      out.write("\t\t\t\t\t\t  \tfunction drawTable() {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar data2 = new google.visualization.DataTable();\r\n");
      out.write("\t\t\t\t\t\t\t\tdata2.addColumn('number', '번호');\r\n");
      out.write("\t\t\t\t\t\t\t\tdata2.addColumn('string', '연령대');\r\n");
      out.write("\t\t\t\t\t\t        data2.addColumn('number', '남자');\r\n");
      out.write("\t\t\t\t\t\t        data2.addColumn('number', '여자');\r\n");
      out.write("\t\t\t\t\t\t        data2.addRows([\r\n");
      out.write("\t\t\t\t\t\t        \t[1, '10세 이하',  {v: mAge0, f: mAge0 +' 명'},  {v: fAge0, f: fAge0 +' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [2, '10대',  {v: mAge10, f: mAge10 + ' 명'},  {v: fAge10, f: fAge10 +' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [3, '20대',  {v: mAge20, f: mAge20 + ' 명'},  {v: fAge20, f: fAge20 +' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [4, '30대',  {v: mAge30, f: mAge30 + ' 명'},  {v: fAge30, f: fAge30 +' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [5, '40대',  {v: mAge40, f: mAge40 + ' 명'},  {v: fAge40, f: fAge40 +' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [6, '50대',  {v: mAge50, f: mAge50 + ' 명'},  {v: fAge50, f: fAge50 +' 명'}],\r\n");
      out.write("\t\t\t\t\t\t            [7, '60세 이상',  {v: mAge60, f: mAge60 + ' 명'},  {v: fAge60, f: fAge60 + ' 명'}]\r\n");
      out.write("\t\t\t\t\t\t\t\t]);\r\n");
      out.write("\t\t\t\t\t\t        var table = new google.visualization.Table(document.getElementById('tableResult'));\r\n");
      out.write("\t\t\t\t\t\t        table.draw(data2, {width: '100%', height: 400});\r\n");
      out.write("\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\terror: function() {\r\n");
      out.write("\t\t\t\t\t\t\talert(\"userAgeInfo 연결 실패\")\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t})//start($function)\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body id=\"body\">\r\n");
      out.write("\t\t<nav id=\"top\">\r\n");
      out.write("\t\t\t<!-- 로고 이미지를 넣고, 로고를 눌렀을 경우 메인페이지로 이동이 되록 설정 -->\r\n");
      out.write("\t\t\t<div id=\"mainLogo\">\r\n");
      out.write("\t\t\t\t<a href=\"MainPage.jsp\">\r\n");
      out.write("\t\t\t\t\t<img src=\"resources/img/MainLogo.png\" width=\"90\" height=\"90\">\r\n");
      out.write("\t\t\t\t</a>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<form action=\"\">\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"search\">\r\n");
      out.write("\t\t\t\t\t<input type=\"submit\" value=\"검색\">\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<!-- 로그인을 하지 않았을 경우는 로그인을 하라는 문구가 출력이 되고,\r\n");
      out.write("\t\t\t\t  로그인을 했을 경우 세션이 설정이 되어서 로그인한 아이디님을 환영한다는 출력을 해줌\r\n");
      out.write("\t\t\t-->\r\n");
      out.write("\t\t\t<div id=\"loginSession\">\r\n");
      out.write("\t\t\t\t");
 if(session.getAttribute("userId") == null) {
      out.write("\r\n");
      out.write("\t\t\t\t\t로그인을 해주세요!\r\n");
      out.write("\t\t\t\t");
} else {
      out.write("\r\n");
      out.write("\t\t\t\t\t");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("님 환영합니다.\r\n");
      out.write("\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</nav>\r\n");
      out.write("\t\t<nav id=\"leftMenu\">\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<h3>\r\n");
      out.write("\t\t\t\t\t<a href=\"MainPage.jsp\">\r\n");
      out.write("\t\t\t\t\t\t메인페이지\r\n");
      out.write("\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t</h3>\r\n");
      out.write("\t\t\t</div><br>\r\n");
      out.write("\t\t\t<hr color=\"white\">\r\n");
      out.write("\t\t\t<!-- 처음에 매뉴가 접혀져있고 로그인 버튼을 누르면 아래 '로그인, 회원정보, 로그아웃' 메뉴가 아래로 펼쳐짐 -->\r\n");
      out.write("\t\t\t<button class=\"accordion\">로그인</button>\r\n");
      out.write("\t\t\t<div class=\"panel\">\t<!-- 펼쳐지는 메뉴가 들어가는 부분, style 설정 -->\r\n");
      out.write("\t\t\t\t<!-- 로그인 메뉴를 누를 경우 로그인 화면으로 넘어감 -->\r\n");
      out.write("\t\t\t\t<div id=\"loginFaded\" class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"UserLogin.jsp\">\r\n");
      out.write("\t\t\t\t\t\t로그인\r\n");
      out.write("\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<!-- 로그인이 되지 않았을경우 로그인이 되지 않았음을 알리는 alert를 실행\r\n");
      out.write("\t\t\t\t\t 로그인이 되었을 경우 해당 아이디의 회원정보를 출력하는 페이지로 넘어감\r\n");
      out.write("\t\t\t\t -->\r\n");
      out.write("\t\t\t\t");
 if(session.getAttribute("userId") == null) {
      out.write("\r\n");
      out.write("\t\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t\t<a href=\"javascript:notLogin();\">\r\n");
      out.write("\t\t\t\t\t\t\t회원정보\r\n");
      out.write("\t\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t");
} else {
      out.write("\r\n");
      out.write("\t\t\t\t\t<!-- 로그인을 해서 회원정보를 눌렀을 경우 UserInformation2로 매핑을 해서 컨트롤러로 넘겨줌 -->\r\n");
      out.write("\t\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t\t<a href=\"UserInformation2\">\r\n");
      out.write("\t\t\t\t\t\t\t회원정보\r\n");
      out.write("\t\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t\t<!-- 세션을 끊어줌 -->\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"UserLogout.jsp\">\r\n");
      out.write("\t\t\t\t\t\t로그아웃\r\n");
      out.write("\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<hr color=\"white\">\r\n");
      out.write("\t\t\t<button class=\"accordion\">미디어</button>\r\n");
      out.write("\t\t\t<div class=\"panel\">\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"all\">축구 영상</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t");
 if(session.getAttribute("userId") == null) {
      out.write("\r\n");
      out.write("\t\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t\t<a href=\"javascript:notLogin();\">\r\n");
      out.write("\t\t\t\t\t\t\t내 동영상\r\n");
      out.write("\t\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t");
} else {
      out.write("\r\n");
      out.write("\t\t\t\t\t<!-- 로그인을 해서 회원정보를 눌렀을 경우 UserInformation2로 매핑을 해서 컨트롤러로 넘겨줌 -->\r\n");
      out.write("\t\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t\t<a href=myvideo?userid=");
      out.print(loginId);
      out.write(">\r\n");
      out.write("\t\t\t\t\t\t\t내 동영상\r\n");
      out.write("\t\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"VideoMain.jsp\">Video Gallery</a> \r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<hr color=\"white\">\r\n");
      out.write("\t\t\t<button class=\"accordion\">쇼핑몰</button>\r\n");
      out.write("\t\t\t<div class=\"panel\">\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"sall\">전체 쇼핑몰</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"foot\">축구 쇼핑몰</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"base\">야구 쇼핑몰</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"basket\">농구 쇼핑몰</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"notice_all2.jsp\">공지사항</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"enquiries_all3.jsp\">문의 사항</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"cart_all4.jsp\">장바구니</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"leftMenuContent\">\r\n");
      out.write("\t\t\t\t\t<a href=\"payment_all5.jsp\">결제</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<!-- 실질적으로 펼쳐지게 해주는 부분-->\r\n");
      out.write("\t\t\t<script>\r\n");
      out.write("\t\t\t\t/* 메뉴 클릭시 그 안에 있는 들을 배열로 저장 */\r\n");
      out.write("\t\t\t    var acc = document.getElementsByClassName(\"accordion\");\r\n");
      out.write("\t\t\t    var i;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t    /* 메뉴 클릭시 안에 있는 것들의 수만큼 반복 */\r\n");
      out.write("\t\t\t    for (i = 0; i < acc.length; i++) {\r\n");
      out.write("\t\t\t    \t/* 클릭을 누를경우 함수 작동 */\r\n");
      out.write("\t\t\t      \tacc[i].addEventListener(\"click\", function() {\r\n");
      out.write("\t\t\t\t        this.classList.toggle(\"active\");\t\t/* 클릭을 했을 경우 동작을 함 */\r\n");
      out.write("\t\t\t\t        var panel = this.nextElementSibling;\r\n");
      out.write("\t\t\t\t        if (panel.style.display === \"block\") { \t/* 펼쳐져 있을때 다시 누르면 접혀지게 하는 구문 */\r\n");
      out.write("\t\t\t\t        \tpanel.style.display = \"none\";\r\n");
      out.write("\t\t\t        \t} else {\r\n");
      out.write("\t\t\t          \t\tpanel.style.display = \"block\";\t\t/* 접혀져 있을 경우 펼쳐지게 하는 구문 */\r\n");
      out.write("\t\t\t        \t}\r\n");
      out.write("\t\t\t      \t});\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t    </script>\r\n");
      out.write("\t\t\t<br>\t\t\t\r\n");
      out.write("\t\t</nav>\r\n");
      out.write("\t\t<div id=\"content\">\r\n");
      out.write("\t\t\t<h2>가입자 현황</h2>\r\n");
      out.write("\t\t\t<hr color=\"black\">\r\n");
      out.write("\t\t\t<button id=\"btn1\" style=\"width: 200px; height: 30px; background-color: white; font-size: 15px; font-family: bold; border-radius: 5px;\">\r\n");
      out.write("\t\t\t\t연령대별 가입자 현황\r\n");
      out.write("\t\t\t</button>\r\n");
      out.write("\t\t\t<button id=\"btn2\" style=\"width: 220px; height: 30px; background-color: white; font-size: 15px; font-family: bold; border-radius: 5px;\">\r\n");
      out.write("\t\t\t\t연령대별 남/여 가입자 현황\r\n");
      out.write("\t\t\t</button>\r\n");
      out.write("\t\t\t<br><br>\r\n");
      out.write("\t\t\t<div id=\"chartResult\" style=\"float:left;\"></div>\r\n");
      out.write("\t\t\t<div id=\"tableResult\" style=\"text-align:right; font-size: 30; font-weight: bold; height: 500px; float:left; width:250px; margin-top: 50px;\"></div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
